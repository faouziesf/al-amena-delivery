@extends('layouts.client')

@section('title', 'Gestion des Manifestes')
@section('page-title', 'Manifestes')
@section('page-description', 'G√©rez vos lots de colis')

@section('content')
<!-- Main container with proper mobile spacing -->
<div x-data="manifestsApp()" x-init="init()" class="pb-6 px-4 sm:px-6 lg:px-8">

    <!-- Header Section - Mobile Optimized -->
    <div class="mb-6">
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-4 sm:p-6 shadow-sm hover:shadow-lg transition-shadow duration-200">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-2 md:space-y-0">
                <div class="flex-1">
                    <h1 class="text-xl sm:text-2xl font-bold text-gray-900 flex items-center">
                        üìã Gestion des Manifestes
                    </h1>
                    <p class="text-gray-600 text-sm mt-1">Cr√©ez des manifestes pour vos colis en attente</p>
                </div>
                <div class="flex flex-row flex-wrap sm:flex-row gap-2 md:gap-3"><button @click="refreshData"
                            class="inline-flex items-center justify-center px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl transition-colors">
                        <svg class="w-full md:w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                        </svg>
                        üîÑ Actualiser
                    </button>
                    <button @click="openCreateModal"
                            class="inline-flex items-center justify-center px-4 py-2 bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 text-white rounded-xl transition-all transform hover:scale-105">
                        <svg class="w-full md:w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                        </svg>
                        ‚ûï Nouveau Manifeste
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Flash Messages -->
    @if(session('success'))
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-xl mb-6 flex items-start">
            <svg class="h-5 w-full md:w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            <p class="text-sm">{{ session('success') }}</p>
        </div>
    @endif

    @if($errors->any())
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl mb-6 flex items-start">
            <svg class="h-5 w-full md:w-5 text-red-400 mr-3 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
            </svg>
            <div class="text-sm">
                <ul class="list-disc list-inside space-y-2 md:space-y-1">
                    @foreach($errors->all() as $error)
                        <li>{{ $error }}</li>
                    @endforeach
                </ul>
            </div>
        </div>
    @endif

    <!-- Loading State -->
    <div x-show="loading" class="flex items-center justify-center py-3 md:py-12">
        <div class="animate-spin rounded-full h-8 w-full md:w-8 border-b-2 border-indigo-600"></div>
        <span class="ml-3 text-gray-600">Chargement...</span>
    </div>

    <!-- Empty State -->
    <div x-show="manifests.length === 0 && !loading" class="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center shadow-sm hover:shadow-lg transition-shadow duration-200">
        <div class="w-full md:w-24 h-24 bg-gradient-to-br from-indigo-100 to-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-full md:w-12 h-12 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
            </svg>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">üìã Aucun manifeste cr√©√©</h3>
        <p class="text-gray-600 mb-6 max-w-md mx-auto">
            Vous n'avez pas encore cr√©√© de manifestes. Cr√©ez votre premier manifeste pour organiser vos colis par lots.
        </p>
        <button @click="openCreateModal"
                class="inline-flex items-center bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 text-white px-6 py-3 rounded-xl transition-all transform hover:scale-105">
            <svg class="w-full md:w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
            ‚ûï Cr√©er votre premier manifeste
        </button>
    </div>

    <!-- Manifests Grid - Mobile-First -->
    <div x-show="manifests.length > 0 && !loading" class="space-y-2 md:space-y-4">
        <template x-for="manifest in manifests" :key="manifest.id">
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-shadow shadow-sm hover:shadow-lg transition-shadow duration-200">
                <!-- Mobile Header -->
                <div class="p-4 sm:p-5 lg:p-6 border-b border-gray-100">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2 md:space-x-3">
                            <div class="w-full md:w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center">
                                <svg class="w-full md:w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                                </svg>
                            </div>
                            <div class="flex-1">
                                <h3 class="font-semibold text-gray-900" x-text="manifest.manifest_number"></h3>
                                <p class="text-sm text-gray-600" x-text="manifest.pickup_address_name"></p>
                            </div>
                        </div>
                        <!-- Status Badge -->
                        <span :class="getStatusBadgeClass(manifest.status_badge)"
                              class="inline-flex items-center px-3 py-1 rounded-full text-sm md:text-xs font-medium"
                              x-text="manifest.status_badge.text"></span>
                    </div>
                </div>

                <!-- Content -->
                <div class="p-4 sm:p-5 lg:p-6">
                    <div class="grid grid-cols-2 sm:grid-cols-4 gap-2 md:gap-3 sm:gap-4 lg:gap-6 mb-4">
                        <div class="text-center p-3 bg-blue-50 rounded-xl">
                            <p class="text-2xl font-bold text-blue-600" x-text="manifest.total_packages"></p>
                            <p class="text-sm md:text-xs text-blue-800">üì¶ Colis</p>
                        </div>
                        <div class="text-center p-3 bg-green-50 rounded-xl">
                            <p class="text-lg font-bold text-green-600" x-text="formatAmount(manifest.total_cod_amount)"></p>
                            <p class="text-sm md:text-xs text-green-800">üí∞ COD Total</p>
                        </div>
                        <div class="text-center p-3 bg-purple-50 rounded-xl">
                            <p class="text-lg font-bold text-purple-600" x-text="formatWeight(manifest.total_weight)"></p>
                            <p class="text-sm md:text-xs text-purple-800">‚öñÔ∏è Poids</p>
                        </div>
                        <div class="text-center p-3 bg-gray-50 rounded-xl">
                            <p class="text-sm font-medium text-gray-600" x-text="formatDate(manifest.generated_at)"></p>
                            <p class="text-sm md:text-xs text-gray-500">üìÖ Cr√©√© le</p>
                        </div>
                    </div>

                    <!-- Actions Row -->
                    <div class="flex flex-wrap gap-2 md:gap-2 pt-3 border-t border-gray-100">
                        <!-- View Button -->
                        <a :href="getShowUrl(manifest)"
                           class="flex-1 sm:flex-none inline-flex items-center justify-center px-4 py-2 bg-indigo-100 hover:bg-indigo-200 text-indigo-700 rounded-xl transition-colors text-sm font-medium">
                            <svg class="w-full md:w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                            </svg>
                            üëÅÔ∏è Consulter
                        </a>

                        <!-- Print Button -->
                        <a :href="getPrintUrl(manifest)" target="_blank"
                           class="flex-1 sm:flex-none inline-flex items-center justify-center px-4 py-2 bg-green-100 hover:bg-green-200 text-green-700 rounded-xl transition-colors text-sm font-medium">
                            <svg class="w-full md:w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"/>
                            </svg>
                            üñ®Ô∏è Imprimer
                        </a>

                    </div>
                </div>
            </div>
        </template>
    </div>

    <!-- Create Manifest Modal - Mobile Optimized -->
    <div x-show="showCreateModal" x-cloak
         class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 p-4 sm:p-5 lg:p-6"
         @click.self="closeCreateModal">
        <div class="relative top-4 mx-auto border w-full max-w-full md:w-4xl shadow-lg rounded-xl bg-white shadow-sm hover:shadow-lg transition-shadow duration-200">
            <div class="p-4 sm:p-6">
                <!-- Modal Header -->
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-xl sm:text-2xl font-bold text-gray-900 flex items-center">
                        ‚ûï Cr√©er un nouveau Manifeste
                    </h3>
                    <button @click="closeCreateModal"
                            class="text-gray-400 hover:text-gray-600 p-2 rounded-xl hover:bg-gray-100 transition-colors">
                        <svg class="w-full md:w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>

                <!-- Modal Content -->
                <div class="max-h-96 sm:max-h-screen overflow-y-auto">

                    <!-- No Packages Available -->
                    <div x-show="availablePackages.length === 0" class="text-center py-3 md:py-12">
                        <div class="w-full md:w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                            <svg class="w-full md:w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2M4 13h2m13-8l-4 4-4-4m-6 4l4 4 4-4"/>
                            </svg>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 mb-2">üì¶ Aucun colis disponible</h3>
                        <p class="text-gray-600 mb-6 max-w-md mx-auto">
                            Tous vos colis sont soit d√©j√† dans des manifestes, soit ne sont pas √©ligibles pour la cr√©ation de manifestes.
                        </p>
                        <a href="{{ route('client.packages.create') }}"
                           class="inline-flex items-center bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-xl transition-colors">
                            <svg class="w-full md:w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                            </svg>
                            Cr√©er des colis
                        </a>
                    </div>

                    <!-- Packages Available -->
                    <div x-show="availablePackages.length > 0" class="space-y-2 md:space-y-6">
                        <!-- Pickup Address Selection -->
                        <div class="bg-indigo-50 border border-indigo-200 rounded-xl p-4 sm:p-5 lg:p-6">
                            <label class="block text-sm font-medium text-indigo-900 mb-3">
                                üìç Adresse de collecte *
                            </label>
                            <select x-model="selectedPickupAddressId"
                                    class="w-full border border-indigo-300 rounded-xl px-4 py-3 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">S√©lectionnez une adresse de collecte</option>
                                @foreach($clientPickupAddresses as $address)
                                <option value="{{ $address->id }}">
                                    {{ $address->name }} - {{ $address->address }}
                                    @if($address->phone) ({{ $address->phone }}) @endif
                                    @if($address->is_default) ‚Ä¢ Par d√©faut @endif
                                </option>
                                @endforeach
                            </select>
                            <p class="text-sm md:text-xs text-indigo-600 mt-2">
                                üí° Tous les colis s√©lectionn√©s seront collect√©s √† cette adresse
                            </p>
                        </div>

                        <!-- Mobile-First Package Selection -->
                        <div class="space-y-2 md:space-y-4">
                            <!-- Available Packages -->
                            <div>
                                <h4 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                    üì¶ Colis Disponibles
                                    <span class="ml-2 text-sm font-normal text-gray-600" x-text="`(${availablePackages.length} disponibles)`">
                                    </span>
                                </h4>

                                <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 md:gap-3 max-h-60 overflow-y-auto">
                                    <template x-for="pkg in availablePackages" :key="pkg.id">
                                        <div class="border border-gray-200 rounded-xl p-3 cursor-pointer transition-all"
                                             :class="selectedPackages.includes(pkg.id) ? 'bg-indigo-50 border-indigo-300' : 'hover:bg-gray-50'"
                                             @click="togglePackage(pkg.id)">
                                            <div class="flex items-center space-x-2 md:space-x-3">
                                                <input type="checkbox" :checked="selectedPackages.includes(pkg.id)"
                                                       class="h-4 w-full md:w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                                                <div class="flex-1 min-w-full md:w-0">
                                                    <div class="flex items-center justify-between">
                                                        <p class="text-sm font-medium text-gray-900" x-text="pkg.package_code"></p>
                                                        <p class="text-sm font-medium text-green-600" x-text="formatAmount(pkg.cod_amount) + ' DT'"></p>
                                                    </div>
                                                    <p class="text-sm md:text-xs text-gray-600 truncate" x-text="pkg.recipient_name"></p>
                                                    <p class="text-sm md:text-xs text-gray-500 truncate" x-text="pkg.content_description"></p>
                                                </div>
                                            </div>
                                        </div>
                                    </template>
                                </div>
                            </div>

                            <!-- Selected Summary -->
                            <div x-show="selectedPackages.length > 0" class="bg-green-50 border border-green-200 rounded-xl p-4 sm:p-5 lg:p-6">
                                <h4 class="text-sm font-medium text-green-800 mb-2">
                                    ‚úÖ R√©sum√© de votre s√©lection
                                </h4>
                                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4 lg:gap-5 gap-2 md:gap-3 sm:gap-4 lg:gap-6 text-sm">
                                    <div>
                                        <span class="text-green-700">Colis s√©lectionn√©s:</span>
                                        <span class="font-medium" x-text="selectedPackages.length"></span>
                                    </div>
                                    <div>
                                        <span class="text-green-700">Valeur totale:</span>
                                        <span class="font-medium" x-text="calculateTotalCOD() + ' DT'"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Modal Actions -->
                        <div class="flex flex-row flex-wrap sm:flex-row gap-2 md:gap-3 pt-6 border-t border-gray-200"><button type="button" @click="closeCreateModal"
                                    class="flex-1 sm:flex-none px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl transition-colors font-medium">
                                ‚ùå Annuler
                            </button>
                            <button type="button" @click="createManifest"
                                    :disabled="selectedPackages.length === 0 || !selectedPickupAddressId || creating"
                                    class="flex-1 px-6 py-3 bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 text-white rounded-xl transition-all font-medium disabled:opacity-50 disabled:cursor-not-allowed">
                                <span x-show="creating" class="inline-flex items-center">
                                    <div class="animate-spin rounded-full h-4 w-full md:w-4 border-b-2 border-white mr-2"></div>
                                    ‚è≥ Cr√©ation en cours...
                                </span>
                                <span x-show="!creating" class="inline-flex items-center">
                                    <svg class="w-full md:w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                                    </svg>
                                    ‚úÖ Cr√©er le Manifeste
                                </span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@push('scripts')
<script>
function manifestsApp() {
    return {
        manifests: @json($existingManifests),
        availablePackages: [],
        loading: false,
        showCreateModal: false,
        selectedPackages: [],
        selectedPickupAddressId: '',
        creating: false,

        async init() {
            // Charger tous les colis disponibles au d√©marrage
            await this.loadAvailablePackages();

            // Watcher pour recharger les colis quand l'adresse de pickup change
            this.$watch('selectedPickupAddressId', async (newValue) => {
                this.selectedPackages = []; // R√©initialiser la s√©lection
                await this.loadAvailablePackages(newValue);
            });
        },

        async loadAvailablePackages(pickupAddressId = null) {
            try {
                let url = '{{ route("client.manifests.api.available-packages") }}';
                if (pickupAddressId) {
                    url += `?pickup_address_id=${pickupAddressId}`;
                }

                const response = await fetch(url);
                const data = await response.json();
                this.availablePackages = data.packages || [];
            } catch (error) {
                console.error('Erreur lors du chargement des colis:', error);
                this.availablePackages = [];
            }
        },

        refreshData() {
            this.loading = true;
            window.location.reload();
        },

        openCreateModal() {
            this.showCreateModal = true;
            this.selectedPackages = [];
            this.selectedPickupAddressId = '';
            // Charger tous les colis disponibles
            this.loadAvailablePackages();
        },

        closeCreateModal() {
            this.showCreateModal = false;
        },

        togglePackage(packageId) {
            const index = this.selectedPackages.indexOf(packageId);
            if (index > -1) {
                this.selectedPackages.splice(index, 1);
            } else {
                this.selectedPackages.push(packageId);
            }
        },

        getPackageById(packageId) {
            return this.availablePackages.find(pkg => pkg.id === packageId);
        },

        calculateTotalCOD() {
            return this.selectedPackages.reduce((total, pkgId) => {
                const pkg = this.getPackageById(pkgId);
                return total + (pkg ? parseFloat(pkg.cod_amount || 0) : 0);
            }, 0).toFixed(3);
        },

        async createManifest() {
            if (this.selectedPackages.length === 0 || !this.selectedPickupAddressId) return;

            this.creating = true;
            try {
                const formData = new FormData();
                formData.append('_token', '{{ csrf_token() }}');
                formData.append('pickup_address_id', this.selectedPickupAddressId);
                this.selectedPackages.forEach(id => {
                    formData.append('package_ids[]', id);
                });

                const response = await fetch('{{ route("client.manifests.generate") }}', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    if (response.redirected) {
                        window.location.href = response.url;
                        return;
                    }

                    this.closeCreateModal();
                    this.showNotification('‚úÖ Manifeste cr√©√© avec succ√®s!', 'success');
                    setTimeout(() => this.refreshData(), 1000);
                } else {
                    let errorMessage = 'Erreur lors de la cr√©ation du manifeste';
                    try {
                        const data = await response.json();
                        errorMessage = data.message || errorMessage;
                    } catch (e) {
                        // Si la r√©ponse n'est pas JSON, utiliser le message par d√©faut
                    }
                    this.showNotification('‚ùå ' + errorMessage, 'error');
                }
            } catch (error) {
                console.error('Erreur:', error);
                this.showNotification('‚ùå Erreur lors de la cr√©ation du manifeste', 'error');
            } finally {
                this.creating = false;
            }
        },

        getStatusBadgeClass(statusBadge) {
            const colorMap = {
                'blue': 'bg-blue-100 text-blue-800 border border-blue-200',
                'orange': 'bg-orange-100 text-orange-800 border border-orange-200',
                'green': 'bg-green-100 text-green-800 border border-green-200',
                'gray': 'bg-gray-100 text-gray-800 border border-gray-200'
            };
            return colorMap[statusBadge.color] || 'bg-gray-100 text-gray-800 border border-gray-200';
        },

        getShowUrl(manifest) {
            return `{{ url('client/manifests') }}/${manifest.id}`;
        },

        getPrintUrl(manifest) {
            return `{{ url('client/manifests') }}/${manifest.id}/print`;
        },

        formatDate(date) {
            return new Date(date).toLocaleDateString('fr-FR', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        },

        formatWeight(weight) {
            return weight ? parseFloat(weight).toFixed(1) + ' kg' : '0 kg';
        },

        formatAmount(amount) {
            return parseFloat(amount || 0).toFixed(3);
        },

        showNotification(message, type = 'info') {
            // Utiliser showToast si disponible, sinon utiliser notre m√©thode locale
            if (window.showToast) {
                window.showToast(message, type);
                return;
            }

            const notification = document.createElement('div');
            const isMobile = window.innerWidth <= 640;
            const topPosition = isMobile ? 'calc(env(safe-area-inset-top, 1rem) + 5.5rem)' : '6rem';

            notification.className = `fixed right-4 z-[10001] p-4 sm:p-5 lg:p-6 rounded-xl shadow-lg text-white max-w-sm ${
                type === 'success' ? 'bg-green-500' :
                type === 'error' ? 'bg-red-500' : 'bg-blue-500'
            }`;
            notification.style.top = topPosition;
            notification.style.maxWidth = isMobile ? 'calc(100vw - 2rem)' : '20rem';
            notification.textContent = message;

            document.body.appendChild(notification);

            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 4000);
        }
    }
}
</script>
@endpush

@push('styles')
<style>
[x-cloak] {
    display: none !important;
}

@media (max-width: 640px) {
    .pb-6 {
        padding-bottom: calc(1.5rem + env(safe-area-inset-bottom));
    }
}
</style>
@endpush
@endsection